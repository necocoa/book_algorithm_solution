def main(n, w, weight, value)
  # 全パターンのDP
  dp = Array.new(n + 1) { Array.new(w + 1, 0) }

  # 1〜6個
  (0...n).each do |i|
    # 各重量
    (0..w).each do |j|
      # 最大価値を保存
      dp[i + 1][j] = if j < weight[i]
                       # 重さがwを超えてないのでweight[i]を選べない
                       # よって weight[i] を選ばない dp[i][j] が最大価値となる
                       dp[i][j]
                     else
                       # 1. 選ばない dp[i][j]
                       # 2. 選ぶ dp[i][j - weight[i]] + value[i]
                       ## 2.1 選んだときに余る重量のときの最大価値 dp[i][j - weight[i]]
                       ## 2.1 選んだときの最大価値を計算している
                       # => それらの最大価値
                       [dp[i][j], dp[i][j - weight[i]] + value[i]].max
                     end
    end
  end

  dp[n][w]
end

weight = [2, 1, 3, 2, 1, 5]
value = [3, 2, 6, 1, 3, 85]
n = weight.size
w = 15
p main(n, w, weight, value)

# [
#   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#   [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
#   [0, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
#   [0, 2, 3, 6, 8, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
#   [0, 2, 3, 6, 8, 9, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12],
#   [0, 3, 5, 6, 9, 11, 12, 14, 14, 15, 15, 15, 15, 15, 15, 15],
#   [0, 3, 5, 6, 9, 85, 88, 90, 91, 94, 96, 97, 99, 99, 100, 100]
# ]
